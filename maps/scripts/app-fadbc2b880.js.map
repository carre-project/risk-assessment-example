{"version":3,"sources":["scripts/app-fadbc2b880.js"],"names":["angular","module","config","$locationProvider","html5Mode","controller","$scope","$location","API","$sce","$timeout","cfpLoadingBar","getMeasureListWithLatestValue","user","username","lastMeasurements","then","res","data","results","predicates","values","observable_names","ob_dates","map","obj","push","p","value","replace","makeLabel","ob","ob_name","date","getRiskEvidences","err","risk_evidences","summary","risk_factors","total_risk_evidences","length","forEach","rv","result","RiskEvidenceConditionParser","evaluate","condition","risk_factor","risk_evidence","rf_source","has_risk_factor_source","rf_target","has_risk_factor_target","rf_label","rl_source_name","has_risk_factor_association_type","rl_target_name","risk_elements","label","source","target","evidences","confidence_interval_min","confidence_interval_max","risk_evidence_ratio_value","display","loading","rf","link","ev","ratio","measurements","Date","toLocaleString","setGraphUrl","iframesLoaded","base","params","url","Object","keys","join","entrysystemUrlSankey","trustAsResourceUrl","entrysystemUrlNetwork","str","indexOf","substring","lastIndexOf","CARRE_DEVICES","accounts","testToken","token","search","baseUrl","absUrl","loginUrl","logoutUrl","visualizationType","oauth_token","loadData","loadTestUser","start","iframeLoaded","complete","service","$http","$cookies","$q","getUser","TOKEN","get","URL","email","r","defer","reject","promise","get_lastMeasurements","query","prefixes","post","encodeURIComponent","get_risk_evidences","this","exports"],"mappings":"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","file":"scripts/app-fadbc2b880.js","sourcesContent":["/*global angular,RiskEvidenceConditionParser */\nangular.module('CarreExample', ['ngCookies','ngSanitize','ngAnimate','cfp.loadingBar','ngOnload'])\n  .config(function($locationProvider) {\n    $locationProvider.html5Mode(true);\n  })\n  .controller('ExampleController', function($scope, $location, API,$sce, $timeout,cfpLoadingBar) {\n\n    //set up the urls \n    var CARRE_DEVICES = API.accounts;\n    var testToken = '66efc31e652208e257c3781b2a40376084c0a2ac',token=null;\n    if($location.search().token) token = $location.search().token;\n    \n    //clean up the browser url\n    $location.url('/').replace();\n    var baseUrl = $location.absUrl();\n    $scope.loginUrl = CARRE_DEVICES + '/login?next=' + baseUrl;\n    $scope.logoutUrl = CARRE_DEVICES + '/logout?next=' + baseUrl;\n    \n    // set default visualization type\n    $scope.visualizationType = 'list';\n\n    // Retrieving a cookie and set initial user object\n    API.user(token).then(function(res) {\n      $scope.user = {\n        oauth_token: res.oauth_token,\n        username: res.username\n      };\n      $scope.loadData();\n    });\n\n    $scope.loadTestUser = function() { \n      API.user(testToken).then(function(res) {\n        $scope.user = {\n          oauth_token: res.oauth_token,\n          username: res.username\n        };\n        $scope.loadData();\n      });\n    };\n\n    $scope.loadData = function() {\n      $scope.measurements=[];\n      $scope.loading = true;\n      cfpLoadingBar.start();\n      getMeasureListWithLatestValue();\n    };\n\n    var results = {};\n    \n    function getMeasureListWithLatestValue() {\n\n      if (!$scope.user.username) return;\n      API.lastMeasurements($scope.user).then(function(res) {\n        console.log(res);\n        var data = res.data;\n\n        results.predicates = [];\n        results.values = {};\n        results.observable_names = {};\n        results.ob_dates = {};\n\n        data.map(function(obj) {\n          results.predicates.push(obj.p.value.replace(\"http://carre.kmi.open.ac.uk/ontology/sensors.owl#\", \":\"));\n          results.values[makeLabel(obj.ob.value)] = obj.value.value;\n          results.observable_names[makeLabel(obj.ob.value)] = obj.ob_name.value;\n          results.ob_dates[makeLabel(obj.ob.value)] = obj.date.value;\n        });\n\n        //get the risk evidences\n        getRiskEvidences();\n      }, function(err) { console.log(\"Error in query measurementList\"); console.log(err); });\n\n\n    }\n\n\n    function getRiskEvidences() {\n\n      API.risk_evidences($scope.user, results.predicates).then(function(res) {\n        var data = res.data;\n        results.summary = [];\n        results.risk_evidences = {};\n        results.risk_factors = {};\n        results.total_risk_evidences = data.length;\n        data.forEach(function(rv) {\n          var result = RiskEvidenceConditionParser.evaluate(rv.condition.value, results.values);\n\n          //             console.log(\n          //               makeLabel(rv.risk_factor.value),\n          //               makeLabel(rv.risk_evidence.value),\n          //               result,\n          //               rv.condition.value,getValues(results.values).join(\"|\"),\n          //               \"---------\"\n          //             );\n\n\n          if (result) {\n\n            var risk_factor = makeLabel(rv.risk_factor.value);\n            var risk_evidence = makeLabel(rv.risk_evidence.value);\n            var rf_source = makeLabel(rv.has_risk_factor_source.value);\n            var rf_target = makeLabel(rv.has_risk_factor_target.value);\n            var rf_label = makeLabel(rv.rl_source_name.value) + \" \" +\n              makeLabel(rv.has_risk_factor_association_type.value) + \" \" +\n              makeLabel(rv.rl_target_name.value);\n            \n            \n            results.risk_elements\n            \n            results.risk_factors[risk_factor] = results.risk_factors[risk_factor] || {\n              label: rf_label,\n              source:rf_source,\n              target:rf_target,\n              evidences: []\n            };\n\n            results.risk_factors[risk_factor].evidences.push(risk_evidence);\n            results.risk_evidences[risk_evidence] = {\n              confidence_interval_min: rv.confidence_interval_min.value,\n              confidence_interval_max: rv.confidence_interval_max.value,\n              risk_evidence_ratio_value: rv.risk_evidence_ratio_value.value\n            };\n\n          }\n\n        });\n        console.log(results);\n        display(results);\n        $scope.loading = false;\n        //           console.log(\n        //             results.risk_factors,\n        //             results.values,\n        //             results.summary.length+\"/\"+results.total_risk_evidences);\n\n      });\n\n    }\n\n    function display(results) {\n\n      $scope.risk_factors = [];\n      //make risk factors with evidences\n      for (var rf in results.risk_factors) {\n        $scope.risk_factors.push({\n          label: results.risk_factors[rf].label,\n          link: \"https://entry.carre-project.eu/risk_factors/\" + rf,\n          evidences: results.risk_factors[rf].evidences.map(function(ev) {\n            return {\n              link: \"https://entry.carre-project.eu/risk_evidences/\" + ev,\n              label: ev,\n              ratio: results.risk_evidences[ev].risk_evidence_ratio_value\n            };\n          })\n        });\n      }\n      $scope.measurements = [];\n      //make measurements\n      for (var ob in results.observable_names) {\n        $scope.measurements.push({\n          label: results.observable_names[ob],\n          link: \"https://entry.carre-project.eu/observables/\" + ob,\n          value: results.values[ob],\n          date: new Date(results.ob_dates[ob]).toLocaleString()\n        });\n      }\n      setGraphUrl();\n\n    }\n    \n    \n    \n    $scope.iframeLoaded=function(){\n      $scope.iframesLoaded++;\n      if($scope.iframesLoaded===1) {\n        cfpLoadingBar.complete();\n      }\n    };\n    \n    function setGraphUrl(){\n      $scope.iframesLoaded=0;\n      \n      var base = \"//entry.carre-project.eu/\";\n      // var base = \"//beta.carre-project.eu:3000/#/\";\n      var params = \"explore?embed=true&hidemenu=true&showonlygraph=true&elementstype=risk_evidences\";\n      var url = base+params+\"&elements=\"+Object.keys(results.risk_evidences).join(\",\");\n      $scope.entrysystemUrlSankey = $sce.trustAsResourceUrl(url+\"&graphtype=sankey\");\n      $scope.entrysystemUrlNetwork = $sce.trustAsResourceUrl(url+\"&graphtype=network\");\n    }\n\n    function makeLabel(str) {\n      var result = \"\";\n      if (str.indexOf(\"#\") >= 0) {\n        result = str.substring(str.lastIndexOf(\"#\") + 1)\n          .replace(\"risk_factor_association_type\", \"\");\n      } else result = str.substring(str.lastIndexOf(\"/\") + 1);\n      if (result.indexOf(\"RF_\") +\n        result.indexOf(\"OB_\") +\n        result.indexOf(\"RV_\") +\n        result.indexOf(\"RL_\") > -4) return result;\n      else return result.replace(/[_-]+/g, \" \");\n    }\n    \n\n  });\n  \n/*global angular */\nangular.module('CarreExample')\n  .service('API', function($http, $cookies, $q) {\n\n    //set up the urls \n    var CARRE_DEVICES = 'https://devices.carre-project.eu/devices/accounts';\n    var URL = 'https://devices.carre-project.eu/ws/'; \n    var prefixes = \"PREFIX xsd: <http://www.w3.org/2001/XMLSchema#> \\n\\\n            PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> \\n\\\n            PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> \\n\\\n            PREFIX : <http://carre.kmi.open.ac.uk/ontology/sensors.owl#> \\n\\\n            PREFIX risk: <http://carre.kmi.open.ac.uk/ontology/risk.owl#> \\n\\\n            PREFIX carreManufacturer: <http://carre.kmi.open.ac.uk/manufacturers/> \\n\\\n            PREFIX carreUsers: <https://carre.kmi.open.ac.uk/users/> \\n \";\n\n    \n  this.exports={\n    'accounts': CARRE_DEVICES,\n    'user': getUser,\n    'lastMeasurements': get_lastMeasurements,\n    'risk_evidences': get_risk_evidences\n  };\n  \n  function getUser(token){\n    var TOKEN = $cookies.get('CARRE_USER') || token || '';\n    //validate cookie token with userProfile api function and get username userGraph\n    if (TOKEN.length > 0) {\n      return $http.get(URL + 'userProfile?token=' + TOKEN).then(function(res) {\n        return {\n          oauth_token: TOKEN,\n          username: res.data.username,\n          email: res.data.email\n        };\n      }, function(err) {\n        console.log(err);\n        return {}\n      });\n    } else {\n      var r=$q.defer();\n      r.reject({})\n      return r.promise;\n    }\n  }\n  \n  \n  function get_lastMeasurements(user) {\n  \n    console.log(\"Get Measurement of List \");\n\n    var query = prefixes +\n    \"SELECT ?date ?p ?value ?ob ?ob_name FROM <https://carre.kmi.open.ac.uk/users/\"+user.username+\"> FROM <http://carre.kmi.open.ac.uk/riskdata> WHERE {  \\n\\\n    { \\n\\\n    SELECT max(?d) as ?date ?p FROM <https://carre.kmi.open.ac.uk/users/\"+user.username+\"> WHERE { \\n\\\n            ?m :has_date / :has_value ?d ; ?p ?o . \\n\\\n            ?o :has_value ?v1 . \\n\\\n                FILTER(!(?p = :has_date) && !(?p = :has_start_date)&& !(?p = :has_end_date) && !(?p = :has_sleep_status)) \\n\\\n        } } \\n\\\n    ?measurement :has_date / :has_value ?date ; ?p ?o . \\n\\\n    ?o :has_value ?value . ?ob a risk:observable ; risk:has_external_predicate ?p; risk:has_observable_name ?ob_name.  \\n\\\n    FILTER (lang(?ob_name)='en') \\n\\\n    } \\n\";\n\n    return $http.post(URL+'query?token='+user.oauth_token+'&sparql='+encodeURIComponent(query));\n    \n\n  }\n  \n\n  \n  function get_risk_evidences(user,predicates) {\n\n    console.log(\"Get RiskEvidences of List \");\n    var query = prefixes+\"SELECT DISTINCT ?risk_evidence ?condition ?confidence_interval_min ?confidence_interval_max ?risk_evidence_ratio_value ?risk_evidence_ratio_type ?risk_factor ?has_risk_factor_source ?has_risk_factor_target ?rl_source_name ?rl_target_name ?has_risk_factor_association_type FROM <http://carre.kmi.open.ac.uk/riskdata> WHERE {  \\n \"+\n    \"  ?risk_evidence a risk:risk_evidence ;  \\n \"+\n    \"  risk:has_risk_factor ?risk_factor;  \\n \"+\n    \" risk:has_risk_evidence_ratio_type ?risk_evidence_ratio_type;  \\n \"+\n    \"   risk:has_risk_evidence_ratio_value ?risk_evidence_ratio_value;  \\n \"+\n    \"   risk:has_confidence_interval_max ?confidence_interval_max;  \\n \"+\n    \"   risk:has_confidence_interval_min ?confidence_interval_min;  \\n \"+\n    \"   risk:has_risk_evidence_observable ?ob ;  \\n \"+\n    \"   risk:has_observable_condition ?condition .  \\n \"+\n    \" #details for risk factor  \\n \"+\n    \" ?risk_factor risk:has_risk_factor_association_type ?has_risk_factor_association_type;  \\n \"+\n    \" risk:has_risk_factor_source ?has_risk_factor_source;  \\n \"+\n    \" risk:has_risk_factor_target ?has_risk_factor_target.  \\n \"+\n    \" ?has_risk_factor_source risk:has_risk_element_name ?rl_source_name.  \\n \"+\n    \" ?has_risk_factor_target risk:has_risk_element_name ?rl_target_name.   \\n \"+\n    \" FILTER(lang(?rl_source_name)='en')   \\n \"+\n    \" FILTER(lang(?rl_target_name)='en')   \\n \"+\n    \" {  \\n \"+\n    \"  SELECT ?ob FROM <http://carre.kmi.open.ac.uk/riskdata> WHERE {  \\n \"+\n    \"  ?ob a risk:observable ;  \\n \"+\n    \"         risk:has_external_predicate ?p.    \\n \"+\n    \" VALUES ?p {  \\n \"+predicates.join(\" \")+\" }  \\n \"+\n    \" }  \\n \"+\n    \" }  \\n \"+\n    \" }\";\n\n\n    return $http.post(URL+'query?token='+user.oauth_token+'&sparql='+encodeURIComponent(query));\n    \n\n  }\n  \n\n\n  \n  return this.exports;\n  \n});"],"sourceRoot":"/source/"}